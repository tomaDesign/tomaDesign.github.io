{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","http","sqlTaskSubscriptions","Object","serverStatus","subscription","interval","indicator","StatusIndicator","pending","url","mysqlServerStatus","mysqlTableStatus","reloadSqlTasks","startMonitoring","sqlTaskSubscription","unsubscribe","clearInterval","startMonitoringInterval","statusObj","createHttpRequest","setInterval","createRESTSubscription","timeoutLenghtInMS","get","baseUrl","subscribe","res","alive","active","offline","err","console","error","sqlTasks","filter","task","adminPage","requestSqlTaskResults","log","uzenetSubscription","uzenet","forEach","entry","response","ngOnDestroy","ngOnInit","refresh","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../environments/environment';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  sqlTaskSubscription: Subscription;    // SQL lekérdezések\n  uzenetSubscription: Subscription;     // felhasználói üzenetből objektum állapota\n  uzenet: any;                          // Helyi példány a felhasználói üzenetből\n  sqlTasks: any;                        // SQL kérések helyi példánya\n  sqlTaskSubscriptions = {};            // SQL kérések futtatásához tartozó feliratkozások\n  Object = Object; // a template fájlokban is elérhető így\n\n  serverStatus: IStatusObject = {\n    subscription: null,\n    interval: null,\n    indicator: StatusIndicator.pending,\n    url: '/serverStatus'\n  };\n  mysqlServerStatus: IStatusObject = {\n    subscription: null,\n    interval: null,\n    indicator: StatusIndicator.pending,\n    url: '/mysqlServerStatus'\n  };\n  mysqlTableStatus: IStatusObject = {\n    subscription: null,\n    interval: null,\n    indicator: StatusIndicator.pending,\n    url: '/mysqlTableStatus'\n  };\n\n  constructor(private http: HttpClient) {\n  }\n\n  ngOnInit(): void {\n    this.reloadSqlTasks();\n    // this.reloadUzenet(); // legutolsó alkalommal nem volt használva.\n    this.startMonitoring();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sqlTaskSubscription) {\n      this.sqlTaskSubscription.unsubscribe();\n    }\n\n    if (this.serverStatus.subscription) {\n      this.serverStatus.subscription.unsubscribe();\n    }\n    if (this.mysqlServerStatus.subscription) {\n      this.mysqlServerStatus.subscription.unsubscribe();\n    }\n    if (this.mysqlTableStatus.subscription) {\n      this.mysqlTableStatus.subscription.unsubscribe();\n    }\n\n\n    if (this.serverStatus.interval) {\n      clearInterval(this.serverStatus.interval);\n    }\n    if (this.mysqlServerStatus.interval) {\n      clearInterval(this.mysqlServerStatus.interval);\n    }\n    if (this.mysqlTableStatus.interval) {\n      clearInterval(this.mysqlServerStatus.interval);\n    }\n  }\n\n  startMonitoring() {\n    this.startMonitoringInterval(this.serverStatus);\n    this.startMonitoringInterval(this.mysqlServerStatus);\n    this.startMonitoringInterval(this.mysqlTableStatus);\n  }\n\n  startMonitoringInterval(statusObj: IStatusObject) {\n    this.createHttpRequest(statusObj);\n    statusObj.interval = setInterval(() => {\n      this.createRESTSubscription(statusObj);\n    }, environment.timeoutLenghtInMS);\n  }\n\n  private createRESTSubscription(statusObj: IStatusObject) {\n    if (statusObj.subscription) {\n      statusObj.subscription.unsubscribe();\n    }\n    statusObj.subscription = this.createHttpRequest(statusObj);\n  }\n\n  private createHttpRequest(statusObj: IStatusObject) {\n    return this.http.get(environment.baseUrl + statusObj.url).subscribe((res: any) => {\n      if (res && res.alive) {\n        statusObj.indicator = StatusIndicator.active;\n      } else {\n        statusObj.indicator = StatusIndicator.offline;\n      }\n    }, err => {\n      console.error('Error with ', statusObj.url, ' status:', err);\n      statusObj.indicator = StatusIndicator.offline;\n    });\n  }\n\n  private reloadSqlTasks() {\n    if (this.sqlTaskSubscription) {\n      this.sqlTaskSubscription.unsubscribe();\n\n    }\n    this.sqlTaskSubscription = this.http.get(environment.baseUrl + '/sqltasks').subscribe(res => {\n        this.sqlTasks = (res as Array<any>).filter(task => task.adminPage);\n        this.requestSqlTaskResults();\n      }, err => {\n        console.log('error: ', err);\n      }\n    );\n  }\n\n  private reloadUzenet() {\n    if (this.uzenetSubscription) {\n      this.uzenetSubscription.unsubscribe();\n    }\n\n    this.uzenetSubscription = this.http.get(environment.baseUrl + '/uzenet').subscribe(res => {\n      this.uzenet = (res as any).uzenet;\n    }, err => {\n      console.log('error: ', err);\n    });\n  }\n\n  requestSqlTaskResults() {\n    this.sqlTasks.forEach(entry => {\n      if (this.sqlTaskSubscriptions[entry.id]) {\n        this.sqlTaskSubscriptions[entry.id].unsubscribe();\n      }\n      this.sqlTaskSubscriptions[entry.id] = this.http.get(environment.baseUrl + '/lekerdezes/' + entry.id).subscribe(res => {\n        entry.response = res;\n      }, err => {\n        console.log('error: ', err);\n      });\n    });\n  }\n\n  refresh() {\n    this.serverStatus.indicator = StatusIndicator.pending;\n    this.mysqlServerStatus.indicator = StatusIndicator.pending;\n    this.ngOnDestroy();\n    this.ngOnInit();\n  }\n}\n\nenum StatusIndicator {\n  pending = 'pending', active = 'active', offline = 'offline'\n}\n\ninterface IStatusObject {\n  subscription: Subscription;\n  interval: any;\n  indicator: StatusIndicator;\n  url: string;\n}\n","<div class=\"page\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"container\">\n    <div style=\"text-align:center\">\n      <h1>\n        Parkolóház - Adminisztrációs oldal\n      </h1>\n      <div fxLayout=\"row\">\n        <p>Ezzel a gombbal újratöltheti a lekérdezéseket:</p>\n        <button mat-raised-button color='primary' (click)=\"refresh()\">\n          Adatok frissítése\n          <mat-icon>refresh</mat-icon>\n        </button>\n      </div>\n\n    </div>\n\n    <h2>Szerver státusz:</h2>\n    <mat-card>\n      <p>\n        Az alábbi kapcsolók jelzik, hogy rendben működik-e az Alkalmazásszerver és az Adatbázis:\n      </p>\n      <table>\n        <tr>\n          <td>Alkalmazásszerver státusz:</td>\n          <td>\n            <button mat-button\n                    [ngClass]=\"{'pending-button':serverStatus.indicator === 'pending',\n              'offline-button':serverStatus.indicator === 'offline',\n              'active-button':serverStatus.indicator === 'active'}\">\n              <ng-container [ngSwitch]=\"serverStatus.indicator\">\n                <ng-container *ngSwitchCase=\"'pending'\">Lekérdezés...</ng-container>\n                <ng-container *ngSwitchCase=\"'offline'\">Nem elérhető!</ng-container>\n                <ng-container *ngSwitchDefault>Elérhető</ng-container>\n              </ng-container>\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td>MySQL szerver státusz:</td>\n          <td>\n            <button mat-button [ngClass]=\"{'pending-button':mysqlServerStatus.indicator === 'pending',\n              'offline-button':mysqlServerStatus.indicator === 'offline',\n              'active-button':mysqlServerStatus.indicator === 'active'}\">\n              <ng-container [ngSwitch]=\"mysqlServerStatus.indicator\">\n                <ng-container *ngSwitchCase=\"'pending'\">Lekérdezés...</ng-container>\n                <ng-container *ngSwitchCase=\"'offline'\">Nem elérhető!</ng-container>\n                <ng-container *ngSwitchDefault>Elérhető</ng-container>\n              </ng-container>\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td>MySQL adatbázis státusz:</td>\n          <td>\n            <button mat-button [ngClass]=\"{'pending-button':mysqlTableStatus.indicator === 'pending',\n              'offline-button':mysqlTableStatus.indicator === 'offline',\n              'active-button':mysqlTableStatus.indicator === 'active'}\">\n              <ng-container [ngSwitch]=\"mysqlTableStatus.indicator\">\n                <ng-container *ngSwitchCase=\"'pending'\">Lekérdezés...</ng-container>\n                <ng-container *ngSwitchCase=\"'offline'\">Még nincs létrehozva!</ng-container>\n                <ng-container *ngSwitchDefault>Elérhető</ng-container>\n              </ng-container>\n            </button>\n          </td>\n        </tr>\n      </table>\n    </mat-card>\n\n<!--    legutolsó alkalommal nem volt használva.-->\n<!--    <h2>Legutolsó beküldött üzenet:</h2>-->\n<!--    <mat-card>-->\n<!--      <ng-container *ngIf=\"uzenet;else noChat\">-->\n<!--        <div fxLayout=\"column\">-->\n<!--          <div fxLayout=\"row\" >-->\n<!--            <p fxFlex=\"30\" fxFlexAlign=\"center\">Legutolsó beküldött üzenet:</p> <br/>-->\n<!--            <p class=\"mat-elevation-z2\" style=\"padding: 10px;\">-->\n<!--              {{uzenet}}-->\n<!--            </p>-->\n<!--          </div>-->\n<!--        </div>-->\n\n<!--        <hr/>-->\n\n<!--      </ng-container>-->\n<!--      <ng-template #noChat>-->\n<!--        <p>Lekérdezés...</p>-->\n<!--      </ng-template>-->\n<!--    </mat-card>-->\n\n\n    <h2>SQL lekérdezések eredményei:</h2>\n    <ng-container *ngIf=\"sqlTasks; else noEntry\">\n      <ng-container *ngFor=\"let entry of sqlTasks\">\n\n        <mat-card>\n          <mat-card-header>\n            <h2>{{entry.id}}. Feladat:</h2>\n          </mat-card-header>\n\n          <h4 class=\"sql-description\">{{entry.description}}</h4>\n          <ng-container *ngIf=\"entry.response; else waitingForEntries\">\n            <table class=\"query-table\">\n              <ng-container *ngIf=\"entry.response.empty; else resultTemplate\">\n                <p><b>Ehhez a feladathoz még nem szerepel SQL lekérdezés a beadandó fájlban\n                  (/lekerdezesek/lekerdezesek.sql).</b></p>\n              </ng-container>\n              <ng-template #resultTemplate>\n                <tr>\n                  <th *ngFor=\"let key of Object.keys(entry?.response[0])\">{{key}}</th>\n                </tr>\n                <ng-container *ngFor=\"let resultEntry of entry.response\">\n\n                  <tr>\n                    <td *ngFor=\"let val of Object.values(resultEntry)\">{{val}}</td>\n                  </tr>\n                </ng-container>\n              </ng-template>\n            </table>\n          </ng-container>\n\n        </mat-card>\n\n\n        <mat-divider></mat-divider>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #noEntry>\n      Nem sikerült az SQL lekérdezéseket lekérdezni.\n    </ng-template>\n\n    <ng-template #waitingForEntries>\n      <p>A lekérdezéshez tartozó válasz betöltése nem sikerült.</p>\n    </ng-template>\n\n  </div>\n</div>\n\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent} from './app.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport {FlexLayoutModule} from '@angular/flex-layout';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatCardModule,\n    MatDividerModule,\n    MatListModule,\n    HttpClientModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatInputModule,\n    MatSnackBarModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  baseUrl: 'http://localhost:8080/api',\n  timeoutLenghtInMS: 5000\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}